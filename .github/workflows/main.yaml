name: Deploy EKS Cluster and Nginx

on:
    workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: cluster-PIN 
  NODE_TYPE: t3.medium
  NODE_COUNT: 2
  AMI_ID: ami-0261755bbcb8c4a84  # AMI ID for Ubuntu 20.04 LTS in us-east-1

jobs:
  Credenciales:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate SSH key
      run: |
        ssh-keygen -t rsa -b 4096 -f jenkins.pem -N ""
        mv jenkins.pem.pub jenkins.pub

    - name: Upload SSH key
      uses: actions/upload-artifact@v3
      with:
        name: ssh-key
        path: |
          jenkins.pem
          jenkins.pub

    - name: Upload CloudFormation template
      uses: actions/upload-artifact@v3
      with:
        name: cloudformation-template
        path: cloudformation/ec2-stack.yaml

  Deploy_CloudFormation:
    needs: Credenciales
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.ec2-ip.outputs.ec2_ip }}
    steps:      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Download CloudFormation template
      uses: actions/download-artifact@v3
      with:
        name: cloudformation-template
        path: cloudformation

    - name: Deploy CloudFormation stack
      id: deploy-cfn     
      run: |
        aws cloudformation deploy \
          --template-file cloudformation/ec2-stack.yaml \
          --stack-name jenkins-ec2-stack \
          --parameter-overrides \
            KeyName=jenkins \
            PublicKeyMaterial="$(cat jenkins.pub)" \
            InstanceType="${{ env.NODE_TYPE }}" \
            AMI="${{ env.AMI_ID }}" \
          --capabilities CAPABILITY_IAM
      env:
        NODE_TYPE: ${{ env.NODE_TYPE }}
        AMI_ID: ${{ env.AMI_ID }}

    - name: Get EC2 Public IP
      id: ec2-ip
      run: |
        EC2_IP=$(aws cloudformation describe-stacks --stack-name jenkins-ec2-stack --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIP'].OutputValue" --output text)
        echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT

    - name: Wait for EC2 instance to be ready
      run: |
        echo "Waiting for EC2 instance to be ready..."
        timeout 300 bash -c 'until nc -z ${{ steps.ec2-ip.outputs.ec2_ip }} 22; do sleep 5; done'

    - name: Setup AWS credentials on EC2
      run: |
        chmod 600 jenkins.pem
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ steps.ec2-ip.outputs.ec2_ip }} '
        mkdir -p ~/.aws
        echo "[default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region=${{ env.AWS_REGION }}" > ~/.aws/credentials
        '

    # - name: Upload SSH key and connection info
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ssh-key-and-info
    #     path: |
    #       jenkins.pem
    #       connection_info.txt

  Conexion_EC2:
    needs: Deploy_CloudFormation
    runs-on: ubuntu-latest
    steps:  
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem

    - name: Connect to EC2 and setup cluster
      run: |
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }} 'bash -s' < ec2_user_data.sh
      env:
        CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
        AWS_REGION: ${{ env.AWS_REGION }}
        NODE_TYPE: ${{ env.NODE_TYPE }}
        NODE_COUNT: ${{ env.NODE_COUNT }}

    - name: Get connection info
      run: |
          scp -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}:/home/ubuntu/connection_info.txt ./connection_info.txt
    
    - name: Upload connection info
      uses: actions/upload-artifact@v3
      with:
          name: connection-info
          path: connection_info.txt

  Deploy_Nginx:
    needs: [Deploy_CloudFormation, Conexion_EC2]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem

    - name: Deploy Nginx
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        # Copiar archivos al EC2        
        scp -i jenkins.pem -o StrictHostKeyChecking=no kubernetes/nginx-deployment.yaml kubernetes/nginx-service.yaml kubernetes/nginx-index-html-configmap.yaml ubuntu@$EC2_IP:~
       
        # Aplicar los archivos
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
        kubectl apply -f nginx-index-html-configmap.yaml
        kubectl apply -f nginx-deployment.yaml
        kubectl apply -f nginx-service.yaml

        # Esperar a que el pod esté listo
        kubectl wait --for=condition=ready pod -l app=nginx --timeout=300s

        # Verificar el estado del despliegue
        kubectl get deployments
        kubectl get pods
        kubectl get services
        '
        
    - name: Update connection information
      run: |
          EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
            NGINX_URL=$(kubectl get service nginx-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            echo "Nginx Service URL: http://$NGINX_URL" >> /home/ubuntu/connection_info.txt
          '
  
    - name: Download updated connection info
      run: |
          scp -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}:/home/ubuntu/connection_info.txt ./connection_info.txt
  
    - name: Upload connection info
      uses: actions/upload-artifact@v3
      with:
        name: connection-info
        path: connection_info.txt
       
  Deploy_EFK:
    needs: [Deploy_CloudFormation, Conexion_EC2, Deploy_Nginx]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem

    - name: Deploy EFK Stack
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        scp -i jenkins.pem -o StrictHostKeyChecking=no kubernetes/elasticsearch-deployment.yaml kubernetes/fluentd-configmap.yaml kubernetes/fluentd-deployment.yaml kubernetes/kibana-deployment.yaml ubuntu@$EC2_IP:~
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
          kubectl apply -f elasticsearch-deployment.yaml
          kubectl apply -f fluentd-configmap.yaml
          kubectl apply -f fluentd-deployment.yaml
          kubectl apply -f kibana-deployment.yaml
          
          # Esperar a que los pods estén listos
          kubectl wait --for=condition=ready pod -l app=elasticsearch --timeout=300s
          kubectl wait --for=condition=ready pod -l app=fluentbit --timeout=300s
          kubectl wait --for=condition=ready pod -l app=kibana --timeout=300s
          
          # Verificar el estado del despliegue
          kubectl get deployments
          kubectl get pods
          kubectl get services
        '
    
    - name: Get Kibana Service URL
      id: kibana-url
      run: |
          EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          KIBANA_URL=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
            kubectl get service kibana -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
          ')
          echo "kibana_url=http://$KIBANA_URL" >> $GITHUB_OUTPUT

    - name: Download existing connection info
      uses: actions/download-artifact@v3
      with:
        name: connection-info      

    - name: Update connection information
      run: |
          EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          KIBANA_URL=${{ steps.kibana-url.outputs.kibana_url }}
          
          # Añadir nueva información al archivo existente
          echo "Kibana URL: $KIBANA_URL" >> connection_info.txt
          
          echo "Service URLs:" >> connection_info.txt
          ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
            echo "Nginx URL: http://$(kubectl get service nginx-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")" >> connection_info.txt
            echo "Kibana URL: http://$(kubectl get service kibana -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")" >> connection_info.txt
          '
          
          cat connection_info.txt
  
    - name: Get Prometheus Service URL
      id: prometheus-url
      run: |
          EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          PROMETHEUS_URL=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
          kubectl get service prometheus -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
          ')
          echo "prometheus_url=http://$PROMETHEUS_URL" >> $GITHUB_OUTPUT
  
    - name: Get Grafana Service URL
      id: grafana-url
      run: |
          EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          GRAFANA_URL=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
          kubectl get service grafana -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
          ')
          echo "grafana_url=http://$GRAFANA_URL" >> $GITHUB_OUTPUT
  
    - name: Update connection information
      run: |
          EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          PROMETHEUS_URL=${{ steps.prometheus-url.outputs.prometheus_url }}
          GRAFANA_URL=${{ steps.grafana-url.outputs.grafana_url }}
  
          echo "Prometheus URL: $PROMETHEUS_URL" >> connection_info.txt
          echo "Grafana URL: $GRAFANA_URL" >> connection_info.txt
  
    - name: Upload updated connection info
      uses: actions/upload-artifact@v3
      with:
          name: connection-info
          path: connection_info.txt

  Setup_Remote_Access:
    needs: [Deploy_CloudFormation, Conexion_EC2, Deploy_Nginx, Deploy_EFK]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Remote Access
      run: |
        chmod +x setup_remote_access.sh
        ./setup_remote_access.sh
        
    - name: Verify Service URLs
      run: |
          echo "Verifying URLs..."
          curl -s -o /dev/null -w "%{http_code}" ${{ steps.nginx-url.outputs.nginx_url }} && echo "Nginx is accessible."
          curl -s -o /dev/null -w "%{http_code}" ${{ steps.kibana-url.outputs.kibana_url }} && echo "Kibana is accessible."
          curl -s -o /dev/null -w "%{http_code}" ${{ steps.prometheus-url.outputs.prometheus_url }} && echo "Prometheus is accessible."
          curl -s -o /dev/null -w "%{http_code}" ${{ steps.grafana-url.outputs.grafana_url }} && echo "Grafana is accessible."